General notes:
after changes to DB: console: reload!

prior to .save of model instances:
.valid? - check if model instance is valid, prior to save
.save  save from model to db
.new_record - if hasn't been saved

+++++++++++++++++++++++++++++
++++++++++++++++++++++
additional gems:
gem 'rails-footnotes', '>= 4.0.0', '<5'
bundle install
(bundle show )GEM_NAME
rails generate rails_footnotes:install
++++++++++++++++++++++
# - separates class from method

: - id key in dictionary /hash
  if :key id's it as a key, can be used as :key => value to associate a value (hashrocket -  => )
    or
  if key: id's it as a key, can be used as key: value to associate a value

+++++++++++++++++++++
routes:

Most Important Routes
In the routes.rb (in the config folder), you can specify different rules to direct different HTTP requests to the appropriate controller/method.

If you're going to follow the RESTful routes/rules, you can simply put something like below:

resources :products

++++++++++++++++++++++++++++
controllers:

To create a new controller, make sure you have a terminal window open and you are in the Rails project directory.

rails generate controller [controller name here]
Example: rails generate controller Comments

This will generate an empty controller file. If you know what specific methods you want in the controller, you can enter them on the command line, and those methods will be automatically defined in the controller file that is generated. For example:

rails generate controller [controller name here] [list of methods separated by space]
Example: rails generate controller Comments index new edit

Or simply...

rails g controller [controller name here] [list of methods separated by space]
Notice that the controller name is capitalized and plural, which is the convention for naming a controller.

+++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++
from bash/terminal (in iTerm) prompt:
- create new rails project
rails new user_login_project
- cd into main project directory
cd user_login_project
-open atom in current directory
atom .
-add Hirb
add:  gem 'hirb' in Gemfile and save
      gem "rails-footnotes"
cd project folder
  install Hirb: bundle install

+++++++++++++++++++++++++++++++

-start server in iTerm
rails s

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
start new bash terminal session (in atom) and
-create model:
 rails g model User first_name:string last_name:string email:string age:integer

-migrate model
 rails db:migrate
-start console  in iTerm : rails c


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
at console prompt:
Hirb.enable

- create records:
user1 = User.new
user1[:first_name] = "Mitchell";
user1[:last_name] = "Blank";
user1[:email] = "mitchellblank@sbcglobal.net";
user1[:age] = 61

user2 = User.new(first_name:"Derby", last_name:"Strom", age:11, email:"dNMe@ananda.net")

user3 = User.new(first_name:"fn3", last_name:"ln3", age:3, email:"em3@em.com");

user4 = User.new(first_name:"fn4", last_name:"ln4", age:4, email:"em4@em.com");

user5 = User.new(first_name:"fn5", last_name:"ln5", age:5, email:"em5@em.com");

user5.new_record?;
user5.valid$;
user1.save;
user2.save;
user3.save;
user4.save;

+++++++++++++++++++++++++++++++++++
validation:

<app_name>/app/models/user.rb

class User < ActiveRecord::Base
  validates :first_name, presence: true
end

Make sure you run reload! after updating and saving this file.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
user6=User.new
user6.valid?
user6.errors
user6.errors.full_messages

user6 = User.new(first_name:"fn6", last_name:"ln6", age:5, email:"em6@em.com");

user6.valid?
user6.errors
user6.errors.full_messages
user6.save

User.all
User.first
User.last
User.order()
User.order(first_name: :asc

User.find(3)


userx = User.find(3);
userx.last_name = 'Darpa';
userx.save,

User.find(4).destroy
User.save
